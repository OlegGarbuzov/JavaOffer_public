const fs = require('fs');
const path = require('path');
const {glob} = require('glob');
const CleanCSS = require('clean-css');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
    // –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å CSS —Ñ–∞–π–ª–∞–º–∏
    cssDirectories: [
        'src/main/resources/public/css',
        'src/main/resources/public/css/admin'
    ],
    
    // –ò—Å–∫–ª—é—á–µ–Ω–∏—è (—Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω–æ –º–∏–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å)
    excludePatterns: [
        '*.min.css',           // –£–∂–µ –º–∏–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        'bootstrap*.css',      // Bootstrap —Ñ–∞–π–ª—ã
        '*.map'                // Source map —Ñ–∞–π–ª—ã
    ],
    
    // –û–ø—Ü–∏–∏ –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ CSS
    minifyOptions: {
        level: 2,              // –£—Ä–æ–≤–µ–Ω—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (0-2)
        format: 'keep-breaks', // –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–∂–∞—Ç–∏—è)
        compatibility: 'ie8',  // –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –±—Ä–∞—É–∑–µ—Ä–∞–º–∏
        inline: ['local'],     // –í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö @import
        rebase: false          // –ù–µ –∏–∑–º–µ–Ω—è—Ç—å –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–∫–ª—é—á–∏—Ç—å —Ñ–∞–π–ª
function shouldExcludeFile(filePath) {
    const fileName = path.basename(filePath);
    return config.excludePatterns.some(pattern => {
        if (pattern.includes('*')) {
            const regex = new RegExp(pattern.replace(/\*/g, '.*'));
            return regex.test(fileName);
        }
        return fileName === pattern;
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ CSS —Ñ–∞–π–ª–∞
async function minifyCSSFile(filePath) {
    try {
        console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: ${filePath}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–∫–ª—é—á–∏—Ç—å —Ñ–∞–π–ª
        if (shouldExcludeFile(filePath)) {
            console.log(`–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª: ${path.basename(filePath)} (–∏—Å–∫–ª—é—á–µ–Ω)`);
            return;
        }
        
        // –ß—Ç–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        const sourceCSS = fs.readFileSync(filePath, 'utf8');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –º–∏–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
        const parsedPath = path.parse(filePath);
        const minFilePath = path.join(parsedPath.dir, `${parsedPath.name}.min${parsedPath.ext}`);
        
        console.log(`–ú–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è ${path.basename(filePath)}...`);
        
        // –ú–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è CSS
        const minifyResult = new CleanCSS(config.minifyOptions).minify(sourceCSS);
        
        if (minifyResult.errors.length > 0) {
            console.error(`–û—à–∏–±–∫–∏ –ø—Ä–∏ –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ ${filePath}:`);
            minifyResult.errors.forEach(error => console.error(`  - ${error}`));
            return;
        }
        
        if (minifyResult.warnings.length > 0) {
            console.warn(`–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–∏ –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ ${filePath}:`);
            minifyResult.warnings.forEach(warning => console.warn(`  - ${warning}`));
        }
        
        // –ó–∞–ø–∏—Å—å –º–∏–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        fs.writeFileSync(minFilePath, minifyResult.styles, 'utf8');
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const originalSize = Buffer.byteLength(sourceCSS, 'utf8');
        const minifiedSize = Buffer.byteLength(minifyResult.styles, 'utf8');
        const compressionRatio = ((originalSize - minifiedSize) / originalSize * 100).toFixed(1);
        
        console.log(`‚úÖ ${path.basename(filePath)} -> ${path.basename(minFilePath)}`);
        console.log(`   –†–∞–∑–º–µ—Ä: ${originalSize} bytes -> ${minifiedSize} bytes (—Å–∂–∞—Ç–∏–µ: ${compressionRatio}%)`);
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${filePath}:`, error.message);
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    console.log('üé® –ó–∞–ø—É—Å–∫ –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ CSS —Ñ–∞–π–ª–æ–≤...\n');
    
    try {
        let totalProcessed = 0;
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        for (const directory of config.cssDirectories) {
            console.log(`üìÇ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${directory}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
            if (!fs.existsSync(directory)) {
                console.warn(`‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${directory}`);
                continue;
            }
            
            // –ü–æ–∏—Å–∫ –≤—Å–µ—Ö CSS —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            const cssFiles = glob.sync(path.join(directory, '*.css').replace(/\\/g, '/'));
            
            if (cssFiles.length === 0) {
                console.log(`   –ù–µ—Ç CSS —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${directory}`);
                continue;
            }
            
            console.log(`   –ù–∞–π–¥–µ–Ω–æ CSS —Ñ–∞–π–ª–æ–≤: ${cssFiles.length}`);
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
            for (const cssFile of cssFiles) {
                await minifyCSSFile(cssFile);
                totalProcessed++;
            }
            
            console.log(''); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        }
        
        console.log(`üéâ –ú–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${totalProcessed}`);
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
    main();
} 