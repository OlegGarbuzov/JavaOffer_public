package com.example.javaoffer.rateLimiter.annotation;

import java.lang.annotation.*;

/**
 * Аннотация для ограничения частоты вызова метода (rate limiting).
 * <p>
 * Применяется к контроллерам или сервисным методам для защиты от слишком частых вызовов.
 * Поддерживает как пользовательские лимиты (по аутентифицированному пользователю или IP),
 * так и глобальные лимиты на метод.
 *
 * <p>
 * Использует алгоритм "Token Bucket" для реализации ограничений.
 * При превышении лимита выбрасывается {@link com.example.javaoffer.rateLimiter.exception.RateLimitException}.
 *
 *
 * <p><b>Пример использования:</b></p>
 * <pre>
 *     {@code
 *     @RateLimit(userLimit = 5, userDurationSeconds = 10, globalLimit = 100, globalDurationSeconds = 60)
 *     public ResponseEntity<?> getData() {
 *         // метод, ограниченный по частоте вызовов
 *         return ResponseEntity.ok(data);
 *     }
 *     }
 * </pre>
 *
 * @author Garbuzov Oleg
 * @since 1.0
 */
@Target({ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME)
@Documented
public @interface RateLimit {

	/**
	 * Максимальное количество вызовов от одного пользователя в пределах временного окна.
	 * <p>
	 * Для аутентифицированных пользователей идентификация происходит по имени пользователя,
	 * для неаутентифицированных - по IP-адресу.
	 *
	 * @return лимит вызовов на пользователя (по умолчанию 6)
	 */
	int userLimit() default 5;

	/**
	 * Длительность временного окна для пользовательского ограничения в секундах.
	 * <p>
	 * По истечении этого времени счетчик вызовов для пользователя сбрасывается.
	 *
	 * @return длительность окна в секундах (по умолчанию 2 секунды)
	 */
	int userDurationSeconds() default 2;

	/**
	 * Глобальный лимит вызовов метода всеми пользователями суммарно в пределах временного окна.
	 * <p>
	 * Если значение равно 0, глобальное ограничение отключено.
	 * Применяется ко всем вызовам метода независимо от пользователя.
	 *
	 * @return глобальный лимит вызовов (0 — отключен, по умолчанию 1000)
	 */
	int globalLimit() default 1000;

	/**
	 * Длительность временного окна для глобального ограничения в секундах.
	 * <p>
	 * Учитывается только если {@link #globalLimit()} больше 0.
	 * По истечении этого времени глобальный счетчик вызовов сбрасывается.
	 *
	 * @return длительность глобального окна в секундах (по умолчанию 1 секунда)
	 */
	int globalDurationSeconds() default 1;
}
