package com.example.javaoffer.exam.enums;

import lombok.Getter;

/**
 * Перечисление, представляющее уровни сложности заданий в системе.
 * <p>
 * Содержит детальную иерархию сложности от простых (Easy) до экспертных (EXPERT) заданий,
 * каждому из которых соответствует числовой уровень от 1 до 10. Используется для
 * классификации вопросов по сложности и определения количества баллов, начисляемых
 * за правильный ответ.
 * 
 *
 * @author Garbuzov Oleg
 * @see ExamDifficulty
 */
@Getter
public enum TaskDifficulty {

    /**
     * Легкий уровень сложности, начальная ступень.
     * <p>
     * Базовые вопросы для проверки фундаментальных знаний.
     * Соответствует числовому уровню 1.
     * 
     */
    Easy1(1),
    
    /**
     * Легкий уровень сложности, средняя ступень.
     * <p>
     * Вопросы чуть выше базового уровня, но все еще в категории легких.
     * Соответствует числовому уровню 2.
     * 
     */
    Easy2(2),
    
    /**
     * Легкий уровень сложности, продвинутая ступень.
     * <p>
     * Наиболее сложные вопросы в категории легких.
     * Соответствует числовому уровню 3.
     * 
     */
    Easy3(3),
    
    /**
     * Средний уровень сложности, начальная ступень.
     * <p>
     * Вопросы средней сложности, начальный подуровень.
     * Соответствует числовому уровню 4.
     * 
     */
    MEDIUM1(4),
    
    /**
     * Средний уровень сложности, средняя ступень.
     * <p>
     * Стандартные вопросы среднего уровня сложности.
     * Соответствует числовому уровню 5.
     * 
     */
    MEDIUM2(5),
    
    /**
     * Средний уровень сложности, продвинутая ступень.
     * <p>
     * Наиболее сложные вопросы в категории средних.
     * Соответствует числовому уровню 6.
     * 
     */
    MEDIUM3(6),
    
    /**
     * Сложный уровень, начальная ступень.
     * <p>
     * Вопросы повышенной сложности, начальный подуровень.
     * Соответствует числовому уровню 7.
     * 
     */
    HARD1(7),
    
    /**
     * Сложный уровень, средняя ступень.
     * <p>
     * Стандартные вопросы высокого уровня сложности.
     * Соответствует числовому уровню 8.
     * 
     */
    HARD2(8),
    
    /**
     * Сложный уровень, продвинутая ступень.
     * <p>
     * Наиболее сложные вопросы в категории сложных.
     * Соответствует числовому уровню 9.
     * 
     */
    HARD3(9),
    
    /**
     * Экспертный уровень сложности.
     * <p>
     * Самые сложные вопросы для экспертов в данной области.
     * Соответствует числовому уровню 10.
     * 
     */
    EXPERT(10);

    /**
     * Числовое значение уровня сложности задания.
     * Используется для расчета баллов и определения порядка вопросов.
     */
    private final int level;

    /**
     * Конструктор с указанием числового уровня сложности.
     * 
     * @param level числовой уровень сложности от 1 до 10
     */
    TaskDifficulty(int level) {
        this.level = level;
    }

    /**
     * Возвращает перечисление по числовому уровню сложности.
     * <p>
     * Метод находит и возвращает соответствующее значение TaskDifficulty
     * для заданного числового уровня сложности.
     * 
     * 
     * @param level числовой уровень сложности от 1 до 10
     * @return соответствующее значение TaskDifficulty
     * @throws IllegalArgumentException если нет соответствующего уровня сложности
     */
    public static TaskDifficulty fromLevel(int level) {
        for (TaskDifficulty difficulty : values()) {
            if (difficulty.getLevel() == level) {
                return difficulty;
            }
        }
        throw new IllegalArgumentException("Нет TaskDifficulty с уровнем: " + level);
    }
}
